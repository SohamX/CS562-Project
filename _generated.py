
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
       
    MF_Struct = {}
    
    #Generate the code for mfQuery
    selectAttributes = "cust,1_max_quant,1_min_quant,1_count_quant"
    groupingVarCount = 1
    groupingAttributes = "cust"
    fVect = "1_max_quant,1_min_quant,1_count_quant"
    predicates = "1.state = 'NY' and 1.year = 1992"
    havingCondition = ""
    print("mfQuery")

    predicates = predicates.split(',')
    pList = []
    #splits predicates by each predicate statment and creates list to store the parts of each predicate in a single 2D array
    for i in predicates:
        pList.append(i.split(' '))
    for i in range(int(groupingVarCount)+1):
	
        if i == 0:
            for row in cur:
                key = ''
                value = {}
                for attr in groupingAttributes.split(','):
                    key += f'{str(row[attr])},'
                key = key[:-1]
                if key not in MF_Struct:
                    MF_Struct[key] = {}
                    for attr in groupingAttributes.split(','):
                        MF_Struct[key][attr] = row[attr]
                    for agg in fVect.split(','):
                        if 'sum' in agg:
                            MF_Struct[key]['sum'] = 0
                        if 'max' in agg:
                            MF_Struct[key]['max'] = 0
                        if 'min' in agg:
                            MF_Struct[key]['min'] = 100000
                        if 'count' in agg:
                            MF_Struct[key]['count'] = 0
                        if 'avg' in agg:
                            MF_Struct[key]['avg'] = 0
                            MF_Struct[key]['sum'] = 0
                            MF_Struct[key]['count'] = 0

                # for p in pList:
                #     if p[1] == 'sum':
                #         MF_Struct[key]['sum'] += row[p[0]]
                #     if p[1] == 'max':
                #         if row[p[0]] > MF_Struct[key]['max']:
                #             MF_Struct[key]['max'] = row[p[0]]
                #     if p[1] == 'min':
                #         if row[p[0]] < MF_Struct[key]['min']:
                #             MF_Struct[key]['min'] = row[p[0]]
                #     if p[1] == 'count':
                #         MF_Struct[key]['count'] += 1
                #     if p[1] == 'avg':
                #         MF_Struct[key]['sum'] += row[p[0]]
                #         MF_Struct[key]['count'] += 1
                #         MF_Struct[key]['avg'] = MF_Struct[key]['sum'] / MF_Struct[key]['count']
    print(MF_Struct)
    
    # for row in cur:
    #     if row['quant'] > 10:
    #         _global.append(row)
    
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    