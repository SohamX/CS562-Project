# import subprocess
from mfQuery import mfQuery
from sqlQuery import sqlQuery


def main():
    """
    This is the generator code. It should take in the MF structure and generate the code
    needed to run the query. That generated code should be saved to a 
    file (e.g. _generated.py) and then run.
    """
    # Get the MF SQL structure from the user
    selectAttributes = "cust,prod,avg_quant,max_quant"
    groupingVarCount = 0
    groupingAttributes = "cust,prod"
    fVect = "avg_quant,max_quant,min_quant,count_quant"
    predicates = ""
    havingCondition = ""

    # Get the MFQuery structure from the user
    # selectAttributes = "cust,1_max_quant,1_min_quant,1_count_quant" 
    # groupingVarCount = 1
    # groupingAttributes = "cust"
    # fVect = "1_max_quant,1_min_quant,1_count_quant"
    # predicates = "1.state = 'NY' and 1.year = 1992"
    # havingCondition = ""

    #check if mf query or normal sql query
    # if it is a mf query, then generate the code for mf query
    if(groupingVarCount > 0):
        algorithm = mfQuery(selectAttributes, groupingVarCount, groupingAttributes, fVect, predicates, havingCondition)
    else:
        algorithm = sqlQuery(selectAttributes, groupingAttributes, fVect, havingCondition)
    # if it is a normal sql query, then generate the code for normal sql query

    # Generate the body of the query


    body = f"""   
    MF_Struct = {{}}
    {algorithm}
    # for row in cur:
    #     if row['quant'] > 10:
    #         _global.append(row)
    """

    # Note: The f allows formatting with variables.
    #       Also, note the indentation is preserved.
    tmp = f"""
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    {body}
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    """

    # Write the generated code to a file
    open("_generated.py", "w").write(tmp)
    # Execute the generated code
    # subprocess.run(["python", "_generated.py"])


if "__main__" == __name__:
    main()